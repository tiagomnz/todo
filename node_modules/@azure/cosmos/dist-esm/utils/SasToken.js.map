{"version":3,"file":"SasToken.js","sourceRoot":"","sources":["../../src/utils/SasToken.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAGlC,OAAO,EAAE,SAAS,EAAE,aAAa,EAAE,sBAAsB,EAAE,MAAM,WAAW,CAAC;AAC7E,OAAO,EAAE,UAAU,EAAE,MAAM,UAAU,CAAC;AACtC,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAE9B;;;GAGG;AAEH,MAAM,UAAgB,2BAA2B,CAC/C,SAAiB,EACjB,kBAAsC;;QAEtC,IAAI,kBAAkB,GAAG,EAAE,CAAC;QAC5B,IACE,OAAO,kBAAkB,CAAC,YAAY,KAAK,QAAQ;YACnD,kBAAkB,CAAC,YAAY,KAAK,EAAE,EACtC;YACA,kBAAkB,IAAI,IAAI,SAAS,CAAC,IAAI,CAAC,oBAAoB,IAAI,kBAAkB,CAAC,YAAY,EAAE,CAAC;SACpG;QAED,IACE,OAAO,kBAAkB,CAAC,aAAa,KAAK,QAAQ;YACpD,kBAAkB,CAAC,aAAa,KAAK,EAAE,EACvC;YACA,IAAI,kBAAkB,CAAC,YAAY,KAAK,EAAE,EAAE;gBAC1C,MAAM,IAAI,KAAK,CAAC,8BAA8B,kBAAkB,CAAC,YAAY;sDAC7B,CAAC,CAAC;aACnD;YACD,kBAAkB,IAAI,IAAI,SAAS,CAAC,IAAI,CAAC,sBAAsB,IAAI,kBAAkB,CAAC,aAAa,EAAE,CAAC;SACvG;QAED,IACE,OAAO,kBAAkB,CAAC,YAAY,KAAK,QAAQ;YACnD,kBAAkB,CAAC,YAAY,KAAK,EAAE,EACtC;YACA,IAAI,kBAAkB,CAAC,aAAa,KAAK,EAAE,EAAE;gBAC3C,MAAM,IAAI,KAAK,CAAC,8BAA8B,kBAAkB,CAAC,aAAa;uDAC7B,CAAC,CAAC;aACpD;YACD,QAAQ,kBAAkB,CAAC,YAAY,EAAE;gBACvC,KAAK,MAAM;oBACT,kBAAkB,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC;oBACrF,MAAM;gBACR,KAAK,kBAAkB;oBACrB,kBAAkB,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,2BAA2B,EAAE,CAAC;oBAC5F,MAAM;gBACR,KAAK,uBAAuB;oBAC1B,kBAAkB,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,+BAA+B,EAAE,CAAC;oBAChG,MAAM;gBACR,KAAK,SAAS;oBACZ,kBAAkB,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC;oBACpF,MAAM;gBACR;oBACE,MAAM,IAAI,KAAK,CAAC,8BAA8B,kBAAkB,CAAC,YAAY;sDAC/B,CAAC,CAAC;oBAChD,MAAM;aACT;YACD,kBAAkB,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,GAAG,kBAAkB,CAAC,YAAY,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;SACxG;QACD,kBAAkB,CAAC,YAAY,GAAG,kBAAkB,CAAC,QAAQ,EAAE,CAAC;QAEhE,IAAI,eAAe,GAAG,EAAE,CAAC;QAEzB,IACE,kBAAkB,CAAC,uBAAuB,KAAK,SAAS;YACxD,kBAAkB,CAAC,uBAAuB,CAAC,MAAM,GAAG,CAAC,EACrD;YACA,IACE,OAAO,kBAAkB,CAAC,YAAY,KAAK,QAAQ;gBACnD,kBAAkB,CAAC,YAAY,KAAK,MAAM,EAC1C;gBACA,MAAM,IAAI,KAAK,CAAC,8BAA8B,kBAAkB,CAAC,YAAY;kEACjB,CAAC,CAAC;aAC/D;YACD,kBAAkB,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;gBAC3D,eAAe,IAAI,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC;YAC7C,CAAC,CAAC,CAAC;SACJ;QAED,IAAI,kBAAkB,CAAC,uBAAuB,KAAK,CAAC,EAAE;YACpD,kBAAkB,CAAC,uBAAuB,IAAI,sBAAsB,CAAC,gBAAgB,CAAC;YACtF,kBAAkB,CAAC,uBAAuB,IAAI,sBAAsB,CAAC,gBAAgB,CAAC;SACvF;QAED,IACE,kBAAkB,CAAC,oBAAoB,KAAK,CAAC;YAC7C,kBAAkB,CAAC,oBAAoB,KAAK,CAAC,EAC7C;YACA,kBAAkB,CAAC,oBAAoB,GAAG,sBAAsB,CAAC,mBAAmB,CAAC;YACrF,kBAAkB,CAAC,oBAAoB,GAAG,sBAAsB,CAAC,mBAAmB,CAAC;SACtF;QAED,IACE,OAAO,kBAAkB,CAAC,OAAO,KAAK,QAAQ;YAC9C,OAAO,kBAAkB,CAAC,OAAO,KAAK,SAAS,EAC/C;YACA,QAAQ,kBAAkB,CAAC,OAAO,EAAE;gBAClC,KAAK,aAAa,CAAC,aAAa;oBAC9B,kBAAkB,CAAC,OAAO,GAAG,CAAC,CAAC;oBAC/B,MAAM;gBACR,KAAK,aAAa,CAAC,eAAe;oBAChC,kBAAkB,CAAC,OAAO,GAAG,CAAC,CAAC;oBAC/B,MAAM;gBACR,KAAK,aAAa,CAAC,eAAe;oBAChC,kBAAkB,CAAC,OAAO,GAAG,CAAC,CAAC;oBAC/B,MAAM;gBACR,KAAK,aAAa,CAAC,iBAAiB;oBAClC,kBAAkB,CAAC,OAAO,GAAG,CAAC,CAAC;oBAC/B,MAAM;gBACR;oBACE,MAAM,IAAI,KAAK,CAAC,8BAA8B,kBAAkB,CAAC,OAAO;iDAC/B,CAAC,CAAC;oBAC3C,MAAM;aACT;SACF;QAED,MAAM,OAAO,GACX,kBAAkB,CAAC,IAAI;YACvB,IAAI;YACJ,kBAAkB,CAAC,OAAO;YAC1B,IAAI;YACJ,kBAAkB,CAAC,YAAY;YAC/B,IAAI;YACJ,eAAe;YACf,IAAI;YACJ,oBAAoB,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC;YAC/D,IAAI;YACJ,oBAAoB,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC;YAChE,IAAI;YACJ,kBAAkB,CAAC,OAAO;YAC1B,IAAI;YACJ,kBAAkB,CAAC,uBAAuB,CAAC,QAAQ,CAAC,EAAE,CAAC;YACvD,IAAI;YACJ,kBAAkB,CAAC,uBAAuB,CAAC,QAAQ,CAAC,EAAE,CAAC;YACvD,IAAI;YACJ,kBAAkB,CAAC,oBAAoB,CAAC,QAAQ,CAAC,EAAE,CAAC;YACpD,IAAI;YACJ,kBAAkB,CAAC,oBAAoB,CAAC,QAAQ,CAAC,EAAE,CAAC;YACpD,IAAI,CAAC;QAEP,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;QACrF,OAAO,uBAAuB,GAAG,aAAa,GAAG,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACjG,CAAC;CAAA;AACD;;GAEG;AACH,mCAAmC;AACnC,MAAM,UAAU,oBAAoB,CAAC,IAAU;IAC7C,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;AAC3C,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { SasTokenProperties } from \"../client/SasToken/SasTokenProperties\";\nimport { Constants, CosmosKeyType, SasTokenPermissionKind } from \"../common\";\nimport { encodeUTF8 } from \"./encode\";\nimport { hmac } from \"./hmac\";\n\n/**\n * Experimental internal only\n * Generates the payload representing the permission configuration for the sas token.\n */\n\nexport async function createAuthorizationSasToken(\n  masterKey: string,\n  sasTokenProperties: SasTokenProperties\n): Promise<string> {\n  let resourcePrefixPath = \"\";\n  if (\n    typeof sasTokenProperties.databaseName === \"string\" &&\n    sasTokenProperties.databaseName !== \"\"\n  ) {\n    resourcePrefixPath += `/${Constants.Path.DatabasesPathSegment}/${sasTokenProperties.databaseName}`;\n  }\n\n  if (\n    typeof sasTokenProperties.containerName === \"string\" &&\n    sasTokenProperties.containerName !== \"\"\n  ) {\n    if (sasTokenProperties.databaseName === \"\") {\n      throw new Error(`illegalArgumentException : ${sasTokenProperties.databaseName} \\\n                          is an invalid database name`);\n    }\n    resourcePrefixPath += `/${Constants.Path.CollectionsPathSegment}/${sasTokenProperties.containerName}`;\n  }\n\n  if (\n    typeof sasTokenProperties.resourceName === \"string\" &&\n    sasTokenProperties.resourceName !== \"\"\n  ) {\n    if (sasTokenProperties.containerName === \"\") {\n      throw new Error(`illegalArgumentException : ${sasTokenProperties.containerName} \\\n                          is an invalid container name`);\n    }\n    switch (sasTokenProperties.resourceKind) {\n      case \"ITEM\":\n        resourcePrefixPath += `${Constants.Path.Root}${Constants.Path.DocumentsPathSegment}`;\n        break;\n      case \"STORED_PROCEDURE\":\n        resourcePrefixPath += `${Constants.Path.Root}${Constants.Path.StoredProceduresPathSegment}`;\n        break;\n      case \"USER_DEFINED_FUNCTION\":\n        resourcePrefixPath += `${Constants.Path.Root}${Constants.Path.UserDefinedFunctionsPathSegment}`;\n        break;\n      case \"TRIGGER\":\n        resourcePrefixPath += `${Constants.Path.Root}${Constants.Path.TriggersPathSegment}`;\n        break;\n      default:\n        throw new Error(`illegalArgumentException : ${sasTokenProperties.resourceKind} \\\n                          is an invalid resource kind`);\n        break;\n    }\n    resourcePrefixPath += `${Constants.Path.Root}${sasTokenProperties.resourceName}${Constants.Path.Root}`;\n  }\n  sasTokenProperties.resourcePath = resourcePrefixPath.toString();\n\n  let partitionRanges = \"\";\n\n  if (\n    sasTokenProperties.partitionKeyValueRanges !== undefined &&\n    sasTokenProperties.partitionKeyValueRanges.length > 0\n  ) {\n    if (\n      typeof sasTokenProperties.resourceKind !== \"string\" &&\n      sasTokenProperties.resourceKind !== \"ITEM\"\n    ) {\n      throw new Error(`illegalArgumentException : ${sasTokenProperties.resourceKind} \\\n                          is an invalid partition key value range`);\n    }\n    sasTokenProperties.partitionKeyValueRanges.forEach((range) => {\n      partitionRanges += `${encodeUTF8(range)},`;\n    });\n  }\n\n  if (sasTokenProperties.controlPlaneReaderScope === 0) {\n    sasTokenProperties.controlPlaneReaderScope += SasTokenPermissionKind.ContainerReadAny;\n    sasTokenProperties.controlPlaneWriterScope += SasTokenPermissionKind.ContainerReadAny;\n  }\n\n  if (\n    sasTokenProperties.dataPlaneReaderScope === 0 &&\n    sasTokenProperties.dataPlaneWriterScope === 0\n  ) {\n    sasTokenProperties.dataPlaneReaderScope = SasTokenPermissionKind.ContainerFullAccess;\n    sasTokenProperties.dataPlaneWriterScope = SasTokenPermissionKind.ContainerFullAccess;\n  }\n\n  if (\n    typeof sasTokenProperties.keyType !== \"number\" ||\n    typeof sasTokenProperties.keyType === undefined\n  ) {\n    switch (sasTokenProperties.keyType) {\n      case CosmosKeyType.PrimaryMaster:\n        sasTokenProperties.keyType = 1;\n        break;\n      case CosmosKeyType.SecondaryMaster:\n        sasTokenProperties.keyType = 2;\n        break;\n      case CosmosKeyType.PrimaryReadOnly:\n        sasTokenProperties.keyType = 3;\n        break;\n      case CosmosKeyType.SecondaryReadOnly:\n        sasTokenProperties.keyType = 4;\n        break;\n      default:\n        throw new Error(`illegalArgumentException : ${sasTokenProperties.keyType} \\\n                          is an invalid key type`);\n        break;\n    }\n  }\n\n  const payload =\n    sasTokenProperties.user +\n    \"\\n\" +\n    sasTokenProperties.userTag +\n    \"\\n\" +\n    sasTokenProperties.resourcePath +\n    \"\\n\" +\n    partitionRanges +\n    \"\\n\" +\n    utcsecondsSinceEpoch(sasTokenProperties.startTime).toString(16) +\n    \"\\n\" +\n    utcsecondsSinceEpoch(sasTokenProperties.expiryTime).toString(16) +\n    \"\\n\" +\n    sasTokenProperties.keyType +\n    \"\\n\" +\n    sasTokenProperties.controlPlaneReaderScope.toString(16) +\n    \"\\n\" +\n    sasTokenProperties.controlPlaneWriterScope.toString(16) +\n    \"\\n\" +\n    sasTokenProperties.dataPlaneReaderScope.toString(16) +\n    \"\\n\" +\n    sasTokenProperties.dataPlaneWriterScope.toString(16) +\n    \"\\n\";\n\n  const signedPayload = await hmac(masterKey, Buffer.from(payload).toString(\"base64\"));\n  return \"type=sas&ver=1.0&sig=\" + signedPayload + \";\" + Buffer.from(payload).toString(\"base64\");\n}\n/**\n * @hidden\n */\n// TODO: utcMilllisecondsSinceEpoch\nexport function utcsecondsSinceEpoch(date: Date): number {\n  return Math.round(date.getTime() / 1000);\n}\n"]}