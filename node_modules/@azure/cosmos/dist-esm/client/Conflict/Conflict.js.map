{"version":3,"file":"Conflict.js","sourceRoot":"","sources":["../../../src/client/Conflict/Conflict.ts"],"names":[],"mappings":";AAGA,OAAO,EAAE,SAAS,EAAE,aAAa,EAAE,eAAe,EAAE,YAAY,EAAE,MAAM,cAAc,CAAC;AAIvF,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AACtD,OAAO,EAAE,qBAAqB,EAAE,MAAM,2BAA2B,CAAC;AAGlE;;;;GAIG;AACH,MAAM,OAAO,QAAQ;IAOnB;;;;OAIG;IACH,YACkB,SAAoB,EACpB,EAAU,EACT,aAA4B,EACrC,YAA2B;QAHnB,cAAS,GAAT,SAAS,CAAW;QACpB,OAAE,GAAF,EAAE,CAAQ;QACT,kBAAa,GAAb,aAAa,CAAe;QACrC,iBAAY,GAAZ,YAAY,CAAe;QAEnC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;IAlBD;;OAEG;IACH,IAAW,GAAG;QACZ,OAAO,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,oBAAoB,IAAI,IAAI,CAAC,EAAE,EAAE,CAAC;IACpF,CAAC;IAeD;;OAEG;IACU,IAAI,CAAC,OAAwB;;YACxC,MAAM,IAAI,GAAG,eAAe,CAAC,IAAI,CAAC,GAAG,EAAE,YAAY,CAAC,SAAS,CAAC,CAAC;YAC/D,MAAM,EAAE,GAAG,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAEnC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,IAAI,CAAqB;gBACjE,IAAI;gBACJ,YAAY,EAAE,YAAY,CAAC,IAAI;gBAC/B,UAAU,EAAE,EAAE;gBACd,OAAO;aACR,CAAC,CAAC;YACH,OAAO,IAAI,gBAAgB,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACtF,CAAC;KAAA;IAED;;OAEG;IACU,MAAM,CAAC,OAAwB;;YAC1C,IAAI,IAAI,CAAC,YAAY,KAAK,SAAS,EAAE;gBACnC,MAAM,EACJ,QAAQ,EAAE,sBAAsB,EACjC,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,0BAA0B,EAAE,CAAC;gBACtD,IAAI,CAAC,YAAY,GAAG,qBAAqB,CAAC,sBAAsB,CAAC,CAAC;aACnE;YACD,MAAM,IAAI,GAAG,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACvC,MAAM,EAAE,GAAG,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAEnC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,CAAqB;gBACnE,IAAI;gBACJ,YAAY,EAAE,YAAY,CAAC,SAAS;gBACpC,UAAU,EAAE,EAAE;gBACd,OAAO;gBACP,YAAY,EAAE,IAAI,CAAC,YAAY;aAChC,CAAC,CAAC;YACH,OAAO,IAAI,gBAAgB,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACtF,CAAC;KAAA;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport { Constants, getIdFromLink, getPathFromLink, ResourceType } from \"../../common\";\nimport { RequestOptions } from \"../../request\";\nimport { Container } from \"../Container\";\nimport { ConflictDefinition } from \"./ConflictDefinition\";\nimport { ConflictResponse } from \"./ConflictResponse\";\nimport { undefinedPartitionKey } from \"../../extractPartitionKey\";\nimport { PartitionKey } from \"../../documents\";\n\n/**\n * Use to read or delete a given {@link Conflict} by id.\n *\n * @see {@link Conflicts} to query or read all conflicts.\n */\nexport class Conflict {\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url(): string {\n    return `/${this.container.url}/${Constants.Path.ConflictsPathSegment}/${this.id}`;\n  }\n  /**\n   * @hidden\n   * @param container - The parent {@link Container}.\n   * @param id - The id of the given {@link Conflict}.\n   */\n  constructor(\n    public readonly container: Container,\n    public readonly id: string,\n    private readonly clientContext: ClientContext,\n    private partitionKey?: PartitionKey\n  ) {\n    this.partitionKey = partitionKey;\n  }\n\n  /**\n   * Read the {@link ConflictDefinition} for the given {@link Conflict}.\n   */\n  public async read(options?: RequestOptions): Promise<ConflictResponse> {\n    const path = getPathFromLink(this.url, ResourceType.conflicts);\n    const id = getIdFromLink(this.url);\n\n    const response = await this.clientContext.read<ConflictDefinition>({\n      path,\n      resourceType: ResourceType.user,\n      resourceId: id,\n      options\n    });\n    return new ConflictResponse(response.result, response.headers, response.code, this);\n  }\n\n  /**\n   * Delete the given {@link ConflictDefinition}.\n   */\n  public async delete(options?: RequestOptions): Promise<ConflictResponse> {\n    if (this.partitionKey === undefined) {\n      const {\n        resource: partitionKeyDefinition\n      } = await this.container.readPartitionKeyDefinition();\n      this.partitionKey = undefinedPartitionKey(partitionKeyDefinition);\n    }\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n\n    const response = await this.clientContext.delete<ConflictDefinition>({\n      path,\n      resourceType: ResourceType.conflicts,\n      resourceId: id,\n      options,\n      partitionKey: this.partitionKey\n    });\n    return new ConflictResponse(response.result, response.headers, response.code, this);\n  }\n}\n"]}